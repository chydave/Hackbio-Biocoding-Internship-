QUESTION 1
Write a function for translating DNA to protein

#Write a function for translating DNA to protein
# The program defines a dictionary that maps DNA codons to their corresponding amino acids.
def translate(seq):
  # Codon to amino acid translation table
  table = {
    'ATA': 'I', 'ATC': 'I', 'ATT': 'I', 'ATG': 'M',
    'ACA': 'T', 'ACC': 'T', 'ACG': 'T', 'ACT': 'T',
    'AAC': 'N', 'AAT': 'N', 'AAA': 'K', 'AAG': 'K',
    'AGC': 'S', 'AGT': 'S', 'AGA': 'R', 'AGG': 'R',
    'CTA': 'L', 'CTC': 'L', 'CTG': 'L', 'CTT': 'L',
    'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCT': 'P',
    'CAC': 'H', 'CAT': 'H', 'CAA': 'Q', 'CAG': 'Q',
    'CGA': 'R', 'CGC': 'R', 'CGG': 'R', 'CGT': 'R',
    'GTA': 'V', 'GTC': 'V', 'GTG': 'V', 'GTT': 'V',
    'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCT': 'A',
    'GAC': 'D', 'GAT': 'D', 'GAA': 'E', 'GAG': 'E',
    'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGT': 'G',
    'TCA': 'S', 'TCC': 'S', 'TCG': 'S', 'TCT': 'S',
    'TTC': 'F', 'TTT': 'F', 'TTA': 'L', 'TTG': 'L',
    'TAC': 'Y', 'TAT': 'Y', 'TAA': '_', 'TAG': '_',
    'TGC': 'C', 'TGT': 'C', 'TGA': '_', 'TGG': 'W',
  }
  protein = ""
# Check if the sequence length is a multiple of 3
  if len(seq) % 3 == 0:
    for i in range(0, len(seq), 3):
      codon = seq[i:i + 3]
      # Append the corresponding amino acid to the protein string
      protein += table.get(codon, '#') # Use '#' for unknown codons
  else:
    print("Warning: Sequence length is not a multiple of 3.")
  return protein
# Example DNA sequence (mock data)
dna_sequence = "TGCXYZTGT" # Example DNA sequence
#Testing the unknown codons XYZ
# Translate the DNA sequence
translated_protein = translate(dna_sequence)
# Print the results
print("DNA Sequence: ", dna_sequence)
print("Translated Protein: ", translated_protein)


QUESTION 2
Write a function that simulates and generates a logistic population growth curve. Your function should include 2 extra parameters that randomize the length of the lag phase and the exponential phase [See population curve here] . Most living populations follow a logistic population growth. Therefore, your growth curve can be: Population Size vs Time, Cell density vs Time, OD vs Time, CFU vs Time, etc
Using your function, generate a dataframe with 100 different growth curves.

import numpy as np
import matplotlib.pyplot as plt
def simulate_logistic_growth(initial_population, carrying_capacity, growth_rate,
                                         death_rate, lag_phase_length, total_time):
    # Initialize time and population arrays
    time = np.linspace(0, total_time, total_time * 10)  # 10 time points per unit time
    population = np.zeros_like(time)
    # Set initial population
    population[0] = initial_population
    # Simulate the growth
    for t in range(1, len(time)):
        if t < lag_phase_length * 5:  # Lag phase
            population[t] = population[t - 1]  # No growth during lag phase
        elif t < (lag_phase_length + 300):  # Exponential phase (100 time units)
            growth = growth_rate * population[t - 1]  # Exponential growth
            population[t] = population[t - 1] + growth
        else:  # Logistic phase with death
            growth = growth_rate * population[t - 1] * (1 - population[t - 1] / carrying_capacity)
            population[t] = population[t - 1] + growth - (death_rate * population[t - 1])  # Subtracting deaths
        # Ensure population does not drop below zero
        if population[t] < 0:
            population[t] = 0
        # Ensure population does not exceed carrying capacity
        elif population[t] > carrying_capacity:
            population[t] = carrying_capacity
    # Plotting the growth curve
    plt.figure(figsize=(10, 6))
    plt.plot(time, population, label='Population Size', color='green')
    plt.title('Logistic Population Growth Curve with Death Phase')
    plt.xlabel('Time')
    plt.ylabel('Population Size')
    #plt.axhline(y=carrying_capacity, color='green', linestyle='--', label='Carrying Capacity (K)')
    plt.legend()
    #plt.grid()
    plt.show()
    #return time, population
# Example usage with total_time set to 100
simulate_logistic_growth(initial_population=10, carrying_capacity=100, growth_rate=0.05,
                                     death_rate=0.05, lag_phase_length=10, total_time=100)

Question 3
Write a function for determining the time to reach 80% of the maximum growth; usually the carrying capacity.
code below with the given parameters

# Function to simulate logistic population growth and determine the time to reach 80% of the carrying capacity
def time_to_80_percent_capacity(initial_population, carrying_capacity, growth_rate, total_time):
# Initialize time and population arrays
    time = np.linspace(0, total_time, total_time * 10)  # 10 time points per unit time
    population = np.zeros_like(time)
    # initial population
    population[0] = initial_population
    # Simulate the growth
    for t in range(1, len(time)):
        # Logistic growth phase
        growth = growth_rate * population[t - 1] * (1 - population[t - 1] / carrying_capacity)
        population[t] = population[t - 1] + growth
        # Make sure population does not drop below zero
        if population[t] < 0:
            population[t] = 0
        # Make sure population does not exceed carrying capacity
        elif population[t] > carrying_capacity:
            population[t] = carrying_capacity
        # Check if population has reached 80% of the carrying capacity
        if population[t] >= 0.8 * carrying_capacity:
            return time[t]  # Return the time when population reaches 80% of carrying capacity
    return None  # If 80% capacity is not reached within the total time
# Parameters given
initial_population = 10
carrying_capacity = 100
growth_rate = 0.05
total_time = 100
# Find the time to reach 80% of carrying capacity
time_80_percent = time_to_80_percent_capacity(initial_population, carrying_capacity, growth_rate, total_time)
if time_80_percent:
    print(f"Time to reach 80% of carrying capacity: {time_80_percent:.2f} time units")
else:
    print("Population did not reach 80% of carrying capacity within the total time.")


QUESTION 4
write a function for calculating the hamming distance between your Slack username and twitter/X handle (synthesize if you donâ€™t have one). Feel free to pad it with extra words if they are not of the same length. (edited) 

def hamming_distance(str1, str2):
    # make both strings equal length
    max_len = max(len(str1), len(str2))
    str1 = str1.ljust(max_len)
    str2 = str2.ljust(max_len)
    # Calculate Hamming distance
    distance = sum(c1 != c2 for c1, c2 in zip(str1, str2))
    return distance
# Example usage
slack_username = "Chinwe"
twitter_handle = "Chydav"
# Calculate the Hamming distance
distance = hamming_distance(slack_username, twitter_handle)
print(f"The Hamming distance between '{slack_username}' and '{twitter_handle}' is: {distance}")
